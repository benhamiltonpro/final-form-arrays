!(function(e, n) {
  'object' == typeof exports && 'undefined' != typeof module
    ? n(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], n)
    : n(((e = e || self)['final-form-arrays'] = {}))
})(this, function(e) {
  'use strict'
  function h() {
    return (h =
      Object.assign ||
      function(e) {
        for (var n = 1; n < arguments.length; n++) {
          var f = arguments[n]
          for (var r in f)
            Object.prototype.hasOwnProperty.call(f, r) && (e[r] = f[r])
        }
        return e
      }).apply(this, arguments)
  }
  function p(e, n, f) {
    delete e.fields[n.name],
      (e.fields[f] = h({}, n, {
        name: f,
        change: n.change,
        blur: n.blur,
        focus: n.focus,
        lastFieldState: void 0
      })),
      e.fields[f].change || delete e.fields[f].change,
      e.fields[f].blur || delete e.fields[f].blur,
      e.fields[f].focus || delete e.fields[f].focus
  }
  function g(e) {
    return e.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
  }
  function i(e, t, n) {
    var i = e[0],
      c = e[1],
      f = e[2],
      r = n.changeValue
    n.resetFieldState,
      r(t, i, function(e) {
        var n = [].concat(e || [])
        return n.splice(c, 0, f), n
      })
    var l = h({}, t.fields),
      a = new RegExp('^' + g(i) + '\\[(\\d+)\\](.*)')
    Object.keys(t.fields)
      .sort()
      .reverse()
      .forEach(function(e) {
        var n = a.exec(e)
        if (n) {
          var f = Number(n[1])
          if (c <= f) {
            var r = i + '[' + (f + 1) + ']' + n[2]
            p(t, l[e], r)
          }
        }
      })
  }
  function u(r, t, i, c) {
    Object.keys(c.fields).forEach(function(e) {
      if (e.substring(0, t.length) === t) {
        var n = e.substring(t.length),
          f = r + '[' + i + ']' + n
        p(c, c.fields[e], f)
      }
    })
  }
  function o(n, f) {
    Object.keys(n.fields).forEach(function(e) {
      ;(n.fields[e] = h({}, n.fields[e], {
        change: n.fields[e].change || (f.fields[e] && f.fields[e].change),
        blur: n.fields[e].blur || (f.fields[e] && f.fields[e].blur),
        focus: n.fields[e].focus || (f.fields[e] && f.fields[e].focus)
      })),
        n.fields[e].change || delete n.fields[e].change,
        n.fields[e].blur || delete n.fields[e].blur,
        n.fields[e].focus || delete n.fields[e].focus
    })
  }
  function t(e, c, n) {
    var f,
      l = e[0],
      a = e[1],
      r = n.changeValue,
      s = n.renameField,
      u = n.getIn,
      o = n.setIn
    r(c, l, function(e) {
      var n = [].concat(e || [])
      return (f = n[a]), n.splice(a, 1), n
    })
    var d = new RegExp('^' + g(l) + '\\[(\\d+)\\](.*)'),
      v = h({}, c, { fields: h({}, c.fields) })
    return (
      Object.keys(c.fields).forEach(function(e) {
        var n = d.exec(e)
        if (n) {
          var f = Number(n[1])
          if (f === a) {
            if ((delete c.fields[e], e === l + '[' + a + ']')) {
              var r = 'formState.submitErrors.' + l,
                t = u(c, r)
              Array.isArray(t) && (t.splice(a, 1), (c = o(c, r, t)))
            }
          } else if (a < f) {
            delete c.fields[e]
            var i = l + '[' + (f - 1) + ']' + n[2]
            v.fields[i] ? p(c, v.fields[e], i) : s(c, e, i)
          }
        }
      }),
      f
    )
  }
  var n = {
    insert: i,
    concat: function(e, n, f) {
      var r = e[0],
        t = e[1]
      ;(0, f.changeValue)(n, r, function(e) {
        return e ? [].concat(e, t) : t
      })
    },
    move: function(e, n, f) {
      var r = e[0],
        t = e[1],
        i = e[2],
        c = f.changeValue
      if (t !== i) {
        c(n, r, function(e) {
          var n = [].concat(e || []),
            f = n[t]
          return n.splice(t, 1), n.splice(i, 0, f), n
        })
        var l = h({}, n, { fields: h({}, n.fields) })
        if ((u(r, r + '[' + t + ']', 'tmp', n), t < i))
          for (var a = t + 1; a <= i; a++) {
            u(r, r + '[' + a + ']', '' + (a - 1), n)
          }
        else
          for (var s = t - 1; i <= s; s--) {
            u(r, r + '[' + s + ']', '' + (s + 1), n)
          }
        u(r, r + '[tmp]', i, n), o(n, l)
      }
    },
    pop: function(e, n, f) {
      var r,
        t,
        i = e[0]
      if (
        ((0, f.changeValue)(n, i, function(e) {
          if (e)
            return e.length
              ? ((t = e.length - 1), (r = e[t]), e.slice(0, t))
              : []
        }),
        void 0 !== t)
      ) {
        var c = new RegExp('^' + g(i) + '\\[' + t + '].*')
        Object.keys(n.fields).forEach(function(e) {
          c.test(e) && delete n.fields[e]
        })
      }
      return r
    },
    push: function(e, n, f) {
      var r = e[0],
        t = e[1]
      ;(0, f.changeValue)(n, r, function(e) {
        return e ? [].concat(e, [t]) : [t]
      })
    },
    remove: t,
    removeBatch: function(e, t, n) {
      var i = e[0],
        c = e[1],
        f = n.changeValue,
        l = [].concat(c)
      l.sort()
      for (var r = 0; r < l.length; r++)
        0 < r && l[r] === l[r - 1] && l.splice(r--, 1)
      var a = []
      f(t, i, function(n) {
        if (
          ((a = c.map(function(e) {
            return n && n[e]
          })),
          !n || !l.length)
        )
          return n
        var f = [].concat(n),
          r = []
        return (
          l.forEach(function(e) {
            f.splice(e - r.length, 1), r.push(n && n[e])
          }),
          f
        )
      })
      var s = new RegExp('^' + g(i) + '\\[(\\d+)\\](.*)'),
        u = h({}, t, { fields: {} })
      return (
        Object.keys(t.fields).forEach(function(e) {
          var n = s.exec(e)
          if (n) {
            var f = Number(n[1])
            if (!~l.indexOf(f)) {
              var r =
                i +
                '[' +
                (f -
                  (function(e, f) {
                    return e.reduce(function(e, n) {
                      return n < f ? e + 1 : e
                    }, 0)
                  })(l, f)) +
                ']' +
                n[2]
              p(u, t.fields[e], r)
            }
          } else u.fields[e] = t.fields[e]
        }),
        (t.fields = u.fields),
        a
      )
    },
    shift: function(e, n, f) {
      var r = e[0]
      return t([r, 0], n, f)
    },
    swap: function(e, n, f) {
      var r = e[0],
        t = e[1],
        i = e[2],
        c = f.changeValue
      if (t !== i) {
        c(n, r, function(e) {
          var n = [].concat(e || []),
            f = n[t]
          return (n[t] = n[i]), (n[i] = f), n
        })
        var l = h({}, n, { fields: h({}, n.fields) }),
          a = r + '[' + i + ']',
          s = r + '[tmp]'
        u(r, r + '[' + t + ']', 'tmp', n), u(r, a, t, n), u(r, s, i, n), o(n, l)
      }
    },
    unshift: function(e, n, f) {
      var r = e[0],
        t = e[1]
      return i([r, 0, t], n, f)
    },
    update: function(e, n, f) {
      var r = e[0],
        t = e[1],
        i = e[2]
      ;(0, f.changeValue)(n, r, function(e) {
        var n = [].concat(e || [])
        return n.splice(t, 1, i), n
      })
    }
  }
  ;(e.default = n), Object.defineProperty(e, '__esModule', { value: !0 })
})
//# sourceMappingURL=final-form-arrays.umd.min.js.map
