!(function(e, n) {
  'object' == typeof exports && 'undefined' != typeof module
    ? n(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], n)
    : n(((e = e || self)['final-form-arrays'] = {}))
})(this, function(e) {
  'use strict'
  function h() {
    return (h =
      Object.assign ||
      function(e) {
        for (var n = 1; n < arguments.length; n++) {
          var i = arguments[n]
          for (var f in i)
            Object.prototype.hasOwnProperty.call(i, f) && (e[f] = i[f])
        }
        return e
      }).apply(this, arguments)
  }
  function g(e, n, i, f, r) {
    void 0 === r && (r = e),
      f(e, n.name, i),
      delete e.fields[n.name],
      (e.fields[i] = h({}, n, {
        name: i,
        change: e.fields[i]
          ? e.fields[i].change
          : r.fields[i] && r.fields[i].change,
        blur: e.fields[i] ? e.fields[i].blur : r.fields[i] && r.fields[i].blur,
        focus: e.fields[i]
          ? e.fields[i].focus
          : r.fields[i] && r.fields[i].focus,
        lastFieldState: void 0
      })),
      e.fields[i].change || delete e.fields[i].change,
      e.fields[i].blur || delete e.fields[i].blur,
      e.fields[i].focus || delete e.fields[i].focus
  }
  function p(e) {
    return e.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
  }
  function t(e, r, n) {
    var t = e[0],
      l = e[1],
      i = e[2],
      f = n.changeValue,
      s = (n.resetFieldState, n.renameField)
    f(r, t, function(e) {
      var n = [].concat(e || [])
      return n.splice(l, 0, i), n
    })
    var c = h({}, r.fields),
      a = new RegExp('^' + p(t) + '\\[(\\d+)\\](.*)')
    Object.keys(r.fields)
      .sort()
      .reverse()
      .forEach(function(e) {
        var n = a.exec(e)
        if (n) {
          var i = Number(n[1])
          if (l <= i) {
            var f = t + '[' + (i + 1) + ']' + n[2]
            g(r, c[e], f, s)
          }
        }
      })
  }
  function v(f, r, t, l, s) {
    Object.keys(l.fields).forEach(function(e) {
      if (e.substring(0, r.length) === r) {
        var n = e.substring(r.length),
          i = f + '[' + t + ']' + n
        g(l, l.fields[e], i, s)
      }
    })
  }
  function b(n, i) {
    Object.keys(n.fields).forEach(function(e) {
      ;(n.fields[e] = h({}, n.fields[e], {
        change: n.fields[e].change || (i.fields[e] && i.fields[e].change),
        blur: n.fields[e].blur || (i.fields[e] && i.fields[e].blur),
        focus: n.fields[e].focus || (i.fields[e] && i.fields[e].focus)
      })),
        n.fields[e].change || delete n.fields[e].change,
        n.fields[e].blur || delete n.fields[e].blur,
        n.fields[e].focus || delete n.fields[e].focus
    })
  }
  function r(e, l, n) {
    var i,
      s = e[0],
      c = e[1],
      f = n.changeValue,
      a = n.renameField,
      u = n.getIn,
      d = n.setIn
    f(l, s, function(e) {
      var n = [].concat(e || [])
      return (i = n[c]), n.splice(c, 1), n
    })
    var o = new RegExp('^' + p(s) + '\\[(\\d+)\\](.*)'),
      v = h({}, l, { fields: h({}, l.fields) })
    return (
      Object.keys(l.fields).forEach(function(e) {
        var n = o.exec(e)
        if (n) {
          var i = Number(n[1])
          if (i === c) {
            if ((delete l.fields[e], e === s + '[' + c + ']')) {
              var f = 'formState.submitErrors.' + s,
                r = u(l, f)
              Array.isArray(r) && (r.splice(c, 1), (l = d(l, f, r)))
            }
          } else if (c < i) {
            delete l.fields[e]
            var t = s + '[' + (i - 1) + ']' + n[2]
            v.fields[t] ? g(l, v.fields[e], t, a, v) : a(l, e, t)
          }
        }
      }),
      i
    )
  }
  var n = {
    insert: t,
    concat: function(e, n, i) {
      var f = e[0],
        r = e[1]
      ;(0, i.changeValue)(n, f, function(e) {
        return e ? [].concat(e, r) : r
      })
    },
    move: function(e, n, i) {
      var f = e[0],
        r = e[1],
        t = e[2],
        l = i.changeValue,
        s = i.renameField
      if (r !== t) {
        l(n, f, function(e) {
          var n = [].concat(e || []),
            i = n[r]
          return n.splice(r, 1), n.splice(t, 0, i), n
        })
        var c = h({}, n, { fields: h({}, n.fields) }),
          a = f + '[' + r + ']',
          u = (Object.keys(n.fields).length + 1).toString()
        if ((v(f, a, u, n, s), r < t))
          for (var d = r + 1; d <= t; d++) {
            v(f, f + '[' + d + ']', '' + (d - 1), n, s)
          }
        else
          for (var o = r - 1; t <= o; o--) {
            v(f, f + '[' + o + ']', '' + (o + 1), n, s)
          }
        v(f, f + '[' + u + ']', t, n, s), b(n, c)
      }
    },
    pop: function(e, n, i) {
      var f,
        r,
        t = e[0]
      if (
        ((0, i.changeValue)(n, t, function(e) {
          if (e)
            return e.length
              ? ((r = e.length - 1), (f = e[r]), e.slice(0, r))
              : []
        }),
        void 0 !== r)
      ) {
        var l = new RegExp('^' + p(t) + '\\[' + r + '].*')
        Object.keys(n.fields).forEach(function(e) {
          l.test(e) && delete n.fields[e]
        })
      }
      return f
    },
    push: function(e, n, i) {
      var f = e[0],
        r = e[1]
      ;(0, i.changeValue)(n, f, function(e) {
        return e ? [].concat(e, [r]) : [r]
      })
    },
    remove: r,
    removeBatch: function(e, r, n) {
      var t = e[0],
        l = e[1],
        i = n.changeValue,
        s = n.renameField,
        c = [].concat(l)
      c.sort()
      for (var f = 0; f < c.length; f++)
        0 < f && c[f] === c[f - 1] && c.splice(f--, 1)
      var a = []
      i(r, t, function(n) {
        if (
          ((a = l.map(function(e) {
            return n && n[e]
          })),
          !n || !c.length)
        )
          return n
        var i = [].concat(n),
          f = []
        return (
          c.forEach(function(e) {
            i.splice(e - f.length, 1), f.push(n && n[e])
          }),
          i
        )
      })
      var u = new RegExp('^' + p(t) + '\\[(\\d+)\\](.*)'),
        d = h({}, r, { fields: {} })
      return (
        Object.keys(r.fields).forEach(function(e) {
          var n = u.exec(e)
          if (n) {
            var i = Number(n[1])
            if (!~c.indexOf(i)) {
              var f =
                t +
                '[' +
                (i -
                  (function(e, i) {
                    return e.reduce(function(e, n) {
                      return n < i ? e + 1 : e
                    }, 0)
                  })(c, i)) +
                ']' +
                n[2]
              g(d, r.fields[e], f, s, r)
            }
          } else d.fields[e] = r.fields[e]
        }),
        (r.fields = d.fields),
        a
      )
    },
    shift: function(e, n, i) {
      var f = e[0]
      return r([f, 0], n, i)
    },
    swap: function(e, n, i) {
      var f = e[0],
        r = e[1],
        t = e[2],
        l = i.changeValue,
        s = i.renameField
      if (r !== t) {
        l(n, f, function(e) {
          var n = [].concat(e || []),
            i = n[r]
          return (n[r] = n[t]), (n[t] = i), n
        })
        var c = h({}, n, { fields: h({}, n.fields) }),
          a = f + '[' + t + ']',
          u = f + '[tmp]'
        v(f, f + '[' + r + ']', 'tmp', n, s),
          v(f, a, r, n, s),
          v(f, u, t, n, s),
          b(n, c)
      }
    },
    unshift: function(e, n, i) {
      var f = e[0],
        r = e[1]
      return t([f, 0, r], n, i)
    },
    update: function(e, n, i) {
      var f = e[0],
        r = e[1],
        t = e[2]
      ;(0, i.changeValue)(n, f, function(e) {
        var n = [].concat(e || [])
        return n.splice(r, 1, t), n
      })
    }
  }
  ;(e.default = n), Object.defineProperty(e, '__esModule', { value: !0 })
})
//# sourceMappingURL=final-form-arrays.umd.min.js.map
